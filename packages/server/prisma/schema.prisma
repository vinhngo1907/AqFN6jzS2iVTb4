generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Supporter {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Admin {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Mod {
    id     String @id @default(uuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Account {
    id          String   @id @default(uuid())
    username    String   @unique @db.VarChar(20)
    password    String   @db.VarChar(200)
    isActivated Boolean  @default(true)
    user        User?
    userId      String?  @db.Uuid
    createdAt   DateTime @default(now())
    createdBy   String   @default("system")
    updatedAt   DateTime @updatedAt
    updatedBy   String   @default("system")
}

model User {
    id          String     @id @default(uuid())
    email       String     @unique @db.VarChar(255)
    fullName    String     @db.VarChar(255)
    roles       Role[]
    modId       String?
    mod         Mod?
    adminId     String?
    admin       Admin?
    supporterId String?
    supporter   Supporter?

    account   Account @relation(fields: [accountId], references: [id])
    accountId String  @unique
}

model Role {
    id        String   @id @default(uuid())
    name      String   @unique @db.VarChar(200)
    users     User[]
    createdAt DateTime @default(now())
    createdBy String   @default("system")
    updatedAt DateTime @updatedAt
    updatedBy String   @default("system")
}

model Subtitle {
    id       String    @id @default(uuid())
    sublines Subline[]
    language String
}

model Subline {
    id        String     @id @default(uuid())
    content   String
    subtitles Subtitle[]
    timestamp DateTime   @default(now())
}

// Define junction table for the many-to-many relationship
// model UserRoles {
//     userId String @unique
//     roleId String @unique

//     user User @relation(fields: [userId], references: [id])
//     role Role @relation(fields: [roleId], references: [id])

//     createdAt DateTime @default(now())
//     createdBy String   @default("system")
//     updatedAt DateTime @updatedAt
//     updatedBy String   @default("system")

//     @@id([userId, roleId])
// }
